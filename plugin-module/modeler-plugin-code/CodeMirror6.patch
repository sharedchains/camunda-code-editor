diff --git a/plugin-module/modeler-plugin-code/client/react/Code/CodeEditor.js b/plugin-module/modeler-plugin-code/client/react/Code/CodeEditor.js
index f464619..5bdcfb9 100644
--- a/plugin-module/modeler-plugin-code/client/react/Code/CodeEditor.js
+++ b/plugin-module/modeler-plugin-code/client/react/Code/CodeEditor.js
@@ -8,30 +8,35 @@ import {
 
 import { encode } from 'js-base64';
 
-import { Controlled as CodeMirror } from 'react-codemirror2';
-import 'codemirror/mode/groovy/groovy';
-import 'codemirror/mode/javascript/javascript';
-
-import 'codemirror/addon/hint/show-hint';
-import 'codemirror/addon/hint/javascript-hint';
-import 'codemirror/addon/hint/anyword-hint';
-import 'codemirror/addon/hint/xml-hint';
-import './groovy-hint';
-
-import 'codemirror/addon/lint/lint';
-import 'codemirror/addon/lint/javascript-lint';
-import 'codemirror/addon/lint/json-lint';
-
-import 'codemirror/addon/fold/brace-fold';
-import 'codemirror/addon/edit/matchbrackets';
-import 'codemirror/addon/edit/closebrackets';
-import 'codemirror/addon/search/match-highlighter';
-import 'codemirror/addon/dialog/dialog';
-import 'codemirror/addon/display/panel';
-import 'codemirror/keymap/sublime';
-
-import { JSHINT } from 'jshint';
-import jsonlint from 'jsonlint-mod';
+import CodeMirror from '@uiw/react-codemirror';
+import { basicSetup } from 'codemirror';
+import { StreamLanguage } from '@codemirror/language';
+import { javascript } from '@codemirror/lang-javascript';
+import { json } from '@codemirror/lang-json';
+import { xml } from '@codemirror/lang-xml';
+import { groovy } from '@codemirror/legacy-modes/mode/groovy';
+import { oneDark } from '@codemirror/theme-one-dark';
+
+// import 'codemirror/addon/hint/show-hint';
+// import 'codemirror/addon/hint/javascript-hint';
+// import 'codemirror/addon/hint/anyword-hint';
+// import 'codemirror/addon/hint/xml-hint';
+// import './groovy-hint';
+//
+// import 'codemirror/addon/lint/lint';
+// import 'codemirror/addon/lint/javascript-lint';
+// import 'codemirror/addon/lint/json-lint';
+//
+// import 'codemirror/addon/fold/brace-fold';
+// import 'codemirror/addon/edit/matchbrackets';
+// import 'codemirror/addon/edit/closebrackets';
+// import 'codemirror/addon/search/match-highlighter';
+// import 'codemirror/addon/dialog/dialog';
+// import 'codemirror/addon/display/panel';
+// import 'codemirror/keymap/sublime';
+
+// import { JSHINT } from 'jshint';
+// import jsonlint from 'jsonlint-mod';
 
 import JSExecutor from '../../utils/executors/JSExecutor';
 import editorConsole from '../../utils/editorConsole';
@@ -42,8 +47,8 @@ import GroovyAPI from '../../utils/executors/GroovyAPI';
 
 const LANGUAGE_EXECUTOR_PORT = process.env.LANGUAGE_EXECUTOR_PORT || '12421';
 
-window.JSHINT = JSHINT;
-window.jsonlint = jsonlint;
+// window.JSHINT = JSHINT;
+// window.jsonlint = jsonlint;
 
 /**
  * Functional component for the Scripting section: Instantiate CodeMirror library and implements the behaviour to save
@@ -54,11 +59,11 @@ window.jsonlint = jsonlint;
  */
 const CodeEditor = props => {
 
-  const [context, setContext] = useState([...props['inputParameters']]);
-  const [editor, setEditor] = useState(null);
-  const [csl, setCsl] = useState(null);
-  const [inputMode,setInputMode] = useState(false);
-  const [vectorsVariablesNumber,setVectorsVariablesNumber] = useState(1);
+  const [ context, setContext ] = useState([ ...props['inputParameters'] ]);
+  const [ editor ] = useState(null);
+  const [ csl, setCsl ] = useState(null);
+  const [ inputMode, setInputMode ] = useState(false);
+  const [ vectorsVariablesNumber, setVectorsVariablesNumber ] = useState(1);
 
   const consoleResultRef = useCallback((consoleRef) => {
     if (consoleRef) {
@@ -108,7 +113,7 @@ const CodeEditor = props => {
     highlightSelectionMatches: { minChars: 2, showToken: true },
     lineWrapping: true,
     lint: true,
-    gutters: ['CodeMirror-lint-markers']
+    gutters: [ 'CodeMirror-lint-markers' ]
   };
 
   let contextOption = {};
@@ -125,13 +130,13 @@ const CodeEditor = props => {
   };
 
   const removeRow = (index) => {
-    let copy = [...context];
+    let copy = [ ...context ];
     copy.splice(index, 1);
     setContext(copy);
   };
 
   const updateRow = (column, value, index) => {
-    let copy = [...context];
+    let copy = [ ...context ];
     copy[index][column] = value;
     setContext(copy);
   };
@@ -143,12 +148,12 @@ const CodeEditor = props => {
     if (props.mode === 'javascript') {
       if (inputMode) {
         const obj = {};
-        context.forEach((x,index) => {
+        context.forEach((x, index) => {
           let values = x.value.split(',');
           if (values.length == vectorsVariablesNumber) {
-            values.forEach((el,i) => {
-              let elementObj = { name: x.name,type:x.type,value:el };
-              obj[i] = [].concat(obj[i] ? obj[i] : [] ,elementObj);
+            values.forEach((el, i) => {
+              let elementObj = { name: x.name, type: x.type, value: el };
+              obj[i] = [].concat(obj[i] ? obj[i] : [], elementObj);
             });
           }
         });
@@ -161,16 +166,14 @@ const CodeEditor = props => {
           }, props.eventBus);
           results.push(jsExecutor.execute());
         }
-      }
-      else {
+      } else {
         let jsExecutor = new JSExecutor(editor.getValue(), context, {
           log: csl.addToConsole,
           clear: csl.clearConsole
         }, props.eventBus);
         jsExecutor.execute();
       }
-    }
-    else {
+    } else {
 
       if (inputMode) {
         const groovyExecutor = new GroovyAPI(`http://localhost:${LANGUAGE_EXECUTOR_PORT}`);
@@ -192,9 +195,7 @@ const CodeEditor = props => {
           }
         });
 
-      }
-
-      else {
+      } else {
 
         // groovy
         const groovyExecutor = new GroovyAPI(`http://localhost:${LANGUAGE_EXECUTOR_PORT}`);
@@ -215,8 +216,6 @@ const CodeEditor = props => {
         }
       }
 
-
-
     }
   };
 
@@ -224,7 +223,6 @@ const CodeEditor = props => {
     props.eventBus.fire(STOP_CODE_EDITOR);
   };
 
-
   return (<div className="ScriptEditor-container">
     <tr>
       <td id="contextTitleRow">
@@ -240,7 +238,8 @@ const CodeEditor = props => {
 
           {inputMode ?
             <span id="variablesNumberDiv">
-              <input type="number" id="vectorsVariablesNumber" value={vectorsVariablesNumber} onChange={({ target }) => {if (target.value >= 1)setVectorsVariablesNumber(target.value);} }/>
+              <input type="number" id="vectorsVariablesNumber" value={vectorsVariablesNumber}
+                onChange={({ target }) => {if (target.value >= 1) setVectorsVariablesNumber(target.value);}}/>
               <label htmlFor="vectorsVariablesNumber">Vectors variables number</label>
               <span id="vectorModeVariablesNumber" className="code-editor-tooltip bottom">?</span>
             </span> : ''}
@@ -262,20 +261,29 @@ const CodeEditor = props => {
     <h4 className="codeTitle">Script</h4>
     <div className="CodeEditor-container">
       <ReflexContainer orientation="vertical">
-        <ReflexElement className="left-pane" propagateDimensions="true" resizeHeight="false" resizeWidth="true" flex={0.8}>
+        <ReflexElement className="left-pane" propagateDimensions="true" resizeHeight="true" resizeWidth="true"
+          flex={0.8}>
+          {/* <CodeMirror*/}
+          {/*  className="CodeEditor Box"*/}
+          {/*  value={props.value}*/}
+          {/*  options={scriptOptions}*/}
+          {/*  onBeforeChange={props.onEditorChange}*/}
+          {/*  cursor={props.cursor}*/}
+          {/*  editorDidMount={ed => {*/}
+          {/*    setEditor(ed);*/}
+          {/*  }}*/}
+          {/* />*/}
           <CodeMirror
             className="CodeEditor Box"
             value={props.value}
-            options={scriptOptions}
-            onBeforeChange={props.onEditorChange}
-            cursor={props.cursor}
-            editorDidMount={ed => {
-              setEditor(ed);
-            }}
+            extensions={[ basicSetup, StreamLanguage.define(groovy), javascript(), json(), xml() ]}
+            theme={oneDark}
+            onChange={props.onEditorChange}
           />
         </ReflexElement>
         <ReflexSplitter/>
-        <ReflexElement className="right-pane" minSize="100" propagateDimensions="true" resizeHeight="false" resizeWidth="true" flex={0.2}>
+        <ReflexElement className="right-pane" minSize="100" propagateDimensions="true" resizeHeight="false"
+          resizeWidth="true" flex={0.2}>
           <div className="RunningResult Box">
             <RunPanel runClicked={runClicked} stopClicked={stopClicked}/>
             <div className="Result-box" ref={consoleResultRef}/>
diff --git a/plugin-module/modeler-plugin-code/package.json b/plugin-module/modeler-plugin-code/package.json
index 5f98e31..c99ca87 100644
--- a/plugin-module/modeler-plugin-code/package.json
+++ b/plugin-module/modeler-plugin-code/package.json
@@ -7,7 +7,7 @@
     "all": "run-s lint bundle",
     "bundle": "webpack",
     "dev": "webpack -w",
-    "lint": "eslint .",
+    "lint": "eslint . --fix",
     "prepublishOnly": "run-s bundle",
     "test": "karma start"
   },
@@ -26,50 +26,58 @@
   "author": "Luca Bonora <luca.bonora@sharedchains.com>",
   "license": "MIT",
   "devDependencies": {
-    "@babel/core": "^7.13.1",
-    "@babel/plugin-proposal-class-properties": "^7.13.0",
-    "@babel/preset-react": "^7.12.13",
-    "babel-loader": "^8.2.2",
-    "camunda-modeler-plugin-helpers": "^3.4.0-alpha.1",
-    "chai": "^4.3.0",
-    "copy-webpack-plugin": "^7.0.0",
-    "css-loader": "^5.0.2",
-    "eslint": "^7.20.0",
-    "eslint-plugin-bpmn-io": "^0.12.0",
-    "eslint-plugin-react": "^7.22.0",
+    "@babel/core": "^7.18.2",
+    "@babel/plugin-proposal-class-properties": "^7.17.12",
+    "@babel/preset-react": "^7.17.12",
+    "babel-loader": "^8.2.5",
+    "camunda-modeler-plugin-helpers": "^5.1.0",
+    "camunda-modeler-webpack-plugin": "^0.1.0",
+    "chai": "^4.3.6",
+    "copy-webpack-plugin": "^11.0.0",
+    "css-loader": "^6.7.1",
+    "eslint": "^7.32.0",
+    "eslint-plugin-bpmn-io": "^0.13.0",
+    "eslint-plugin-react": "^7.30.0",
     "file-loader": "^6.2.0",
-    "karma": "^6.1.1",
-    "karma-chrome-launcher": "^3.1.0",
+    "karma": "^6.3.20",
+    "karma-chrome-launcher": "^3.1.1",
     "karma-mocha": "^2.0.1",
     "karma-sinon-chai": "^2.0.2",
     "karma-webpack": "^5.0.0",
-    "mocha": "^8.3.0",
+    "mocha": "^10.0.0",
     "mocha-test-container-support": "^0.2.0",
     "npm-run-all": "^4.1.5",
-    "puppeteer": "^7.1.0",
+    "puppeteer": "^14.3.0",
     "raw-loader": "^4.0.2",
-    "sinon": "^9.2.4",
-    "sinon-chai": "^3.5.0",
-    "style-loader": "^2.0.0",
-    "webpack": "^5.24.0",
-    "webpack-cli": "^4.5.0"
+    "sinon": "^14.0.0",
+    "sinon-chai": "^3.7.0",
+    "style-loader": "^3.3.1",
+    "webpack": "^5.73.0",
+    "webpack-cli": "^4.9.2"
   },
   "dependencies": {
-    "acorn": "^8.2.2",
-    "bpmn-js": "^8.2.0",
-    "bpmn-js-properties-panel": "^0.40.0",
-    "classnames": "^2.2.6",
-    "codemirror": "^5.59.3",
-    "execa": "^5.0.1",
-    "inherits": "^2.0.4",
-    "js-base64": "^3.6.1",
-    "jshint": "^2.12.0",
+    "@bpmn-io/properties-panel": "^0.13.2",
+    "@codemirror/lang-javascript": "^6.0.0",
+    "@codemirror/lang-json": "^6.0.0",
+    "@codemirror/lang-xml": "^6.0.0",
+    "@codemirror/language": "^6.0.0",
+    "@codemirror/legacy-modes": "^6.0.0",
+    "@codemirror/lint": "^6.0.0",
+    "@codemirror/theme-one-dark": "^6.0.0",
+    "@uiw/react-codemirror": "^4.8.1",
+    "acorn": "^8.7.1",
+    "bpmn-js": "^9.2.1",
+    "bpmn-js-properties-panel": "^1.1.1",
+    "classnames": "^2.3.1",
+    "codemirror": "^6.0.0",
+    "execa": "^5.1.1",
+    "js-base64": "^3.7.2",
+    "jshint": "^2.13.4",
     "jsonlint-mod": "^1.7.6",
     "lodash": "^4.17.21",
-    "min-dom": "^3.1.3",
-    "react-codemirror2": "^7.2.1",
-    "react-dom": "^17.0.2",
-    "react-reflex": "^4.0.1",
+    "min-dom": "^3.2.1",
+    "react-measure": "^2.5.2",
+    "react-reflex": "^4.0.9",
     "which": "^2.0.2"
   }
 }
